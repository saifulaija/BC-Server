// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(uuid())
  email              String      @unique
  password           String
  role               UserRole
  needPasswordChange Boolean     @default(true)
  status             UserStatus  @default(ACTIVE)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  doctor             Doctor?
  patient            Patient?
  subscriber         Subscriber?
  employee           Employee?
  admin              Admin?

  @@map("users")
}

model Subscriber {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String
  address       String?
  isDeleted     Boolean  @default(false)
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("subscribers")
}

model Employee {
  id                     String         @id @default(uuid())
  email                  String         @unique
  name                   String
  dob                    String
  gender                 Gender
  maritalStatus          MaritalStatus?
  profilePhoto           String?
  contactNumber          String
  emergencyContactNumber String?
  address                String?
  designation            String
  experience             Int            @default(0)
  qualification          String
  joing_date             String?
  salary                 Int            @default(0)
  resigning_date         String?
  bankAccountNumber      String?
  bankName               String?
  isDeleted              Boolean        @default(false)
  userId                 String         @unique
  user                   User           @relation(fields: [userId], references: [id])
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  branch   Branch?
  purchase Purchase[]

  @@map("employees")
}

model Branch {
  id         String     @id @default(uuid())
  branchName BranchName
  managerId  String     @unique
  manager    Employee   @relation(fields: [managerId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("branches")
}

model Customer {
  id            String     @id @default(uuid())
  name          String
  contactNumber String
  address       String
  customerId    String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Purchase      Purchase[]

  @@map("customesr")
}

model Paddy {
  id            String          @id @default(uuid())
  name          String
  category      PaddyCategory
  price         Int
  quantity      Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  purchase_Item Purchase_Item[]

  @@map("paddies")
}

model Store {
  id            String     @id @default(uuid())
  name          String
  location      String
  contactNumber String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  mainStoreId   String
  mainStore     Main_Store @relation(fields: [mainStoreId], references: [id])
  purchase      Purchase[]

  @@map("stores")
}

model Purchase {
  id          String   @id @default(uuid())
  emp_id      String
  employee    Employee @relation(fields: [emp_id], references: [id])
  cus_id      String
  customer    Customer @relation(fields: [cus_id], references: [id])
  storeId     String
  store       Store    @relation(fields: [storeId], references: [id])
  total_price Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  purchase_Item Purchase_Item[]

  @@map("purchases")
}

model Purchase_Item {
  id         String   @id @default(uuid())
  purchaseId String
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  paddyId    String
  paddy      Paddy    @relation(fields: [paddyId], references: [id])
  quantity   Int
  unit_price Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("purchase_items")
}

model Category_Stock {
  id             String @id @default(uuid())
  total_quantity Int

  @@map("category_stocks")
}

model Store_Stock_Total {
  id             String @id @default(uuid())
  total_quantity Int
  total_price    Float

  @@map("store_stock_totals")
}

model Main_Store {
  id   String @id @default(uuid())
  name String

  stores Store[]
}

model Doctor {
  id                  String              @id @default(uuid())
  email               String              @unique
  name                String
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int                 @default(0)
  gender              Gender
  apointmentFee       Int
  qualification       String
  currentWorkingPlace String
  designation         String
  doctorSpecialties   DoctorSpecialties[]
  isDeleted           Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User                @relation(references: [email], fields: [email])
  averageRating       Float               @default(0.0)
  appointments        Appointment[]
  schedules           DoctorSchedule[]
  prescription        Prescription[]
  review              Review[]

  @@map("doctors")
}

model Specialties {
  id      String              @id @default(uuid())
  title   String
  icon    String?
  doctors DoctorSpecialties[]

  @@map("specialties")
}

model DoctorSpecialties {
  specialtiesId String
  specialties   Specialties @relation(fields: [specialtiesId], references: [id])

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  @@id([specialtiesId, doctorId])
  @@map("doctor_specialties")
}

model Patient {
  id               String            @id @unique @default(uuid())
  email            String            @unique
  name             String
  profilePhoto     String?
  contactNumber    String?
  address          String?
  isDeleted        Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  medicalReport    MedicalReport[]
  patientHelthData PatientHelthData?
  user             User              @relation(references: [email], fields: [email])
  appointments     Appointment[]
  prescription     Prescription[]
  review           Review[]

  @@map("patients")
}

model PatientHelthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  dateOfBirth         DateTime?
  gender              Gender
  bloodGroup          BloodGroup
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String?
  weight              String?
  smokingStatus       Boolean?      @default(false)
  dietaryPreferences  String?
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?
  immunizationStatus  Boolean?      @default(false)
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("patientHelthDatas")
}

model MedicalReport {
  id        String  @id @default(uuid())
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("medicalReports")
}

model Admin {
  id            String         @id @unique @default(uuid())
  email         String         @unique
  name          String
  profilePhoto  String?
  address       String?
  contactNumber String?
  gender        Gender?
  maritalStatus MaritalStatus?
  qualification String?
  isDeleted     Boolean        @default(false)
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("admins")
}

model Schedule {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  doctorSchedules DoctorSchedule[]
  Appointment     Appointment?

  @@map("schedule")
}

model DoctorSchedule {
  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])

  isBooked Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId String?

  @@id([doctorId, scheduleId])
  @@map("doctorSchedule")
}

model Appointment {
  id        String  @id @default(uuid())
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  scheduleId String   @unique
  schedule   Schedule @relation(fields: [scheduleId], references: [id])

  videoCallingId String
  status         AppointmentStatus @default(SCHEDULED)
  paymentStatus  PaymentStatus     @default(UNPAID)
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  payment        Payment?
  prescription   Prescription?
  review         Review?
  DoctorSchedule DoctorSchedule[]

  @@map("appointments")
}

model Payment {
  id                 String        @id @default(uuid())
  appointmentId      String        @unique
  appointment        Appointment   @relation(fields: [appointmentId], references: [id])
  amount             Float         @default(0.00)
  transactionId      String        @unique
  status             PaymentStatus @default(UNPAID)
  paymentGatewayData Json?

  @@map("payments")
}

model Prescription {
  id       String @id @default(uuid())
  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  followUpDate DateTime?
  instructions String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("prescriptions")
}

model Review {
  id       String @id @default(uuid())
  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

enum UserRole {
  ADMIN
  DOCTOR
  PATIENT
  SUPER_ADMIN
  SUBSCRIBER
  HEAD_OF_SELLS
  SELLS_MANAGER
  STORE_MANAGER
}

enum UserStatus {
  BLOCKED
  ACTIVE
  PENDING
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum AppointmentStatus {
  SCHEDULED
  INPROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  UNPAID
  PAID
}

enum BranchName {
  HRDEPARTMENT
  PURCHASEDEPARTMENT
  SELLDEPERTMENT
}

enum PaddyCategory {
  Basmoti
  Aman
  Boro
}
